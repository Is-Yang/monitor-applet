"use strict";

var __assign = undefined && undefined.__assign || function () {
    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var queue = [];
function getContext() {
    var pages = getCurrentPages();
    return pages[pages.length - 1];
}
var Dialog = function Dialog(options) {
    options = __assign(__assign({}, Dialog.currentOptions), options);
    return new Promise(function (resolve, reject) {
        var context = options.context || getContext();
        var dialog = context.selectComponent(options.selector);
        delete options.context;
        delete options.selector;
        if (dialog) {
            dialog.setData(__assign({ onCancel: reject, onConfirm: resolve }, options));
            queue.push(dialog);
        } else {
            console.warn('未找到 van-dialog 节点，请确认 selector 及 context 是否正确');
        }
    });
};
Dialog.defaultOptions = {
    show: true,
    title: '',
    width: null,
    message: '',
    zIndex: 100,
    overlay: true,
    selector: '#van-dialog',
    className: '',
    asyncClose: false,
    transition: 'scale',
    customStyle: '',
    messageAlign: '',
    overlayStyle: '',
    confirmButtonText: '确认',
    cancelButtonText: '取消',
    showConfirmButton: true,
    showCancelButton: false,
    closeOnClickOverlay: false,
    confirmButtonOpenType: ''
};
Dialog.alert = Dialog;
Dialog.confirm = function (options) {
    return Dialog(__assign({ showCancelButton: true }, options));
};
Dialog.close = function () {
    queue.forEach(function (dialog) {
        dialog.close();
    });
    queue = [];
};
Dialog.stopLoading = function () {
    queue.forEach(function (dialog) {
        dialog.stopLoading();
    });
};
Dialog.setDefaultOptions = function (options) {
    Object.assign(Dialog.currentOptions, options);
};
Dialog.resetDefaultOptions = function () {
    Dialog.currentOptions = __assign({}, Dialog.defaultOptions);
};
Dialog.resetDefaultOptions();
exports.default = Dialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy5qcyJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXVlIiwiZ2V0Q29udGV4dCIsInBhZ2VzIiwiZ2V0Q3VycmVudFBhZ2VzIiwiRGlhbG9nIiwib3B0aW9ucyIsImN1cnJlbnRPcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb250ZXh0IiwiZGlhbG9nIiwic2VsZWN0Q29tcG9uZW50Iiwic2VsZWN0b3IiLCJzZXREYXRhIiwib25DYW5jZWwiLCJvbkNvbmZpcm0iLCJwdXNoIiwiY29uc29sZSIsIndhcm4iLCJkZWZhdWx0T3B0aW9ucyIsInNob3ciLCJ0aXRsZSIsIndpZHRoIiwibWVzc2FnZSIsInpJbmRleCIsIm92ZXJsYXkiLCJjbGFzc05hbWUiLCJhc3luY0Nsb3NlIiwidHJhbnNpdGlvbiIsImN1c3RvbVN0eWxlIiwibWVzc2FnZUFsaWduIiwib3ZlcmxheVN0eWxlIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0Iiwic2hvd0NvbmZpcm1CdXR0b24iLCJzaG93Q2FuY2VsQnV0dG9uIiwiY2xvc2VPbkNsaWNrT3ZlcmxheSIsImNvbmZpcm1CdXR0b25PcGVuVHlwZSIsImFsZXJ0IiwiY29uZmlybSIsImNsb3NlIiwiZm9yRWFjaCIsInN0b3BMb2FkaW5nIiwic2V0RGVmYXVsdE9wdGlvbnMiLCJyZXNldERlZmF1bHRPcHRpb25zIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsV0FBWSxhQUFRLFVBQUtBLFFBQWQsSUFBMkIsWUFBWTtBQUNsREEsZUFBV0MsT0FBT0MsTUFBUCxJQUFpQixVQUFTQyxDQUFULEVBQVk7QUFD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QUFjLFVBQVUvQixNQUFWLEVBQWtCO0FBQzVCQSxlQUFPZ0MsV0FBUDtBQUNILEtBRkQ7QUFHSCxDQUpEO0FBS0F2QyxPQUFPd0MsaUJBQVAsR0FBMkIsVUFBVXZDLE9BQVYsRUFBbUI7QUFDMUNyQixXQUFPQyxNQUFQLENBQWNtQixPQUFPRSxjQUFyQixFQUFxQ0QsT0FBckM7QUFDSCxDQUZEO0FBR0FELE9BQU95QyxtQkFBUCxHQUE2QixZQUFZO0FBQ3JDekMsV0FBT0UsY0FBUCxHQUF3QnZCLFNBQVMsRUFBVCxFQUFhcUIsT0FBT2dCLGNBQXBCLENBQXhCO0FBQ0gsQ0FGRDtBQUdBaEIsT0FBT3lDLG1CQUFQO0FBQ0EvQyxRQUFRZ0QsT0FBUixHQUFrQjFDLE1BQWxCIiwiZmlsZSI6ImRpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBxdWV1ZSA9IFtdO1xuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgICB2YXIgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKTtcbiAgICByZXR1cm4gcGFnZXNbcGFnZXMubGVuZ3RoIC0gMV07XG59XG52YXIgRGlhbG9nID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIERpYWxvZy5jdXJyZW50T3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0IHx8IGdldENvbnRleHQoKTtcbiAgICAgICAgdmFyIGRpYWxvZyA9IGNvbnRleHQuc2VsZWN0Q29tcG9uZW50KG9wdGlvbnMuc2VsZWN0b3IpO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5jb250ZXh0O1xuICAgICAgICBkZWxldGUgb3B0aW9ucy5zZWxlY3RvcjtcbiAgICAgICAgaWYgKGRpYWxvZykge1xuICAgICAgICAgICAgZGlhbG9nLnNldERhdGEoX19hc3NpZ24oeyBvbkNhbmNlbDogcmVqZWN0LCBvbkNvbmZpcm06IHJlc29sdmUgfSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgcXVldWUucHVzaChkaWFsb2cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCfmnKrmib7liLAgdmFuLWRpYWxvZyDoioLngrnvvIzor7fnoa7orqQgc2VsZWN0b3Ig5Y+KIGNvbnRleHQg5piv5ZCm5q2j56GuJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5EaWFsb2cuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgc2hvdzogdHJ1ZSxcbiAgICB0aXRsZTogJycsXG4gICAgd2lkdGg6IG51bGwsXG4gICAgbWVzc2FnZTogJycsXG4gICAgekluZGV4OiAxMDAsXG4gICAgb3ZlcmxheTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJyN2YW4tZGlhbG9nJyxcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGFzeW5jQ2xvc2U6IGZhbHNlLFxuICAgIHRyYW5zaXRpb246ICdzY2FsZScsXG4gICAgY3VzdG9tU3R5bGU6ICcnLFxuICAgIG1lc3NhZ2VBbGlnbjogJycsXG4gICAgb3ZlcmxheVN0eWxlOiAnJyxcbiAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruiupCcsXG4gICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsXG4gICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogZmFsc2UsXG4gICAgY2xvc2VPbkNsaWNrT3ZlcmxheTogZmFsc2UsXG4gICAgY29uZmlybUJ1dHRvbk9wZW5UeXBlOiAnJ1xufTtcbkRpYWxvZy5hbGVydCA9IERpYWxvZztcbkRpYWxvZy5jb25maXJtID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gRGlhbG9nKF9fYXNzaWduKHsgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSB9LCBvcHRpb25zKSk7XG59O1xuRGlhbG9nLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGRpYWxvZykge1xuICAgICAgICBkaWFsb2cuY2xvc2UoKTtcbiAgICB9KTtcbiAgICBxdWV1ZSA9IFtdO1xufTtcbkRpYWxvZy5zdG9wTG9hZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChkaWFsb2cpIHtcbiAgICAgICAgZGlhbG9nLnN0b3BMb2FkaW5nKCk7XG4gICAgfSk7XG59O1xuRGlhbG9nLnNldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBPYmplY3QuYXNzaWduKERpYWxvZy5jdXJyZW50T3B0aW9ucywgb3B0aW9ucyk7XG59O1xuRGlhbG9nLnJlc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgRGlhbG9nLmN1cnJlbnRPcHRpb25zID0gX19hc3NpZ24oe30sIERpYWxvZy5kZWZhdWx0T3B0aW9ucyk7XG59O1xuRGlhbG9nLnJlc2V0RGVmYXVsdE9wdGlvbnMoKTtcbmV4cG9ydHMuZGVmYXVsdCA9IERpYWxvZztcbiJdfQ==