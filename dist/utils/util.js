'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
var regexDecode = /&(Gt|GT|ii);|&(gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
var decodeMapNumeric = { '0': '\uFFFD', '128': '\u20AC', '130': '\u201A', '131': '\u0192', '132': '\u201E', '133': '\u2026', '134': '\u2020', '135': '\u2021', '136': '\u02C6', '137': '\u2030', '138': '\u0160', '139': '\u2039', '140': '\u0152', '142': '\u017D', '145': '\u2018', '146': '\u2019', '147': '\u201C', '148': '\u201D', '149': '\u2022', '150': '\u2013', '151': '\u2014', '152': '\u02DC', '153': '\u2122', '154': '\u0161', '155': '\u203A', '156': '\u0153', '158': '\u017E', '159': '\u0178' };
var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65000, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];

var stringFromCharCode = String.fromCharCode;

var object = {};
var hasOwnProperty = object.hasOwnProperty;
var has = function has(object, propertyName) {
    return hasOwnProperty.call(object, propertyName);
};

var contains = function contains(array, value) {
    var index = -1;
    var length = array.length;
    while (++index < length) {
        if (array[index] == value) {
            return true;
        }
    }
    return false;
};

var merge = function merge(options, defaults) {
    if (!options) {
        return defaults;
    }
    var result = {};
    var key = void 0;
    for (key in defaults) {
        // A `hasOwnProperty` check is not needed here, since only recognized
        // option names are used anyway. Any others are ignored.
        result[key] = has(options, key) ? options[key] : defaults[key];
    }
    return result;
};

var parseError = function parseError(message) {
    throw Error('Parse error: ' + message);
};
var codePointToSymbol = function codePointToSymbol(codePoint, strict) {
    var output = '';
    if (codePoint >= 0xD800 && codePoint <= 0xDFFF || codePoint > 0x10FFFF) {
        if (strict) {
            parseError('character reference outside the permissible Unicode range');
        }
        return '\uFFFD';
    }
    if (has(decodeMapNumeric, codePoint)) {
        if (strict) {
            parseError('disallowed character reference');
        }
        return decodeMapNumeric[codePoint];
    }
    if (strict && contains(invalidReferenceCodePoints, codePoint)) {
        parseError('disallowed character reference');
    }
    if (codePoint > 0xFFFF) {
        codePoint -= 0x10000;
        output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
    }
    output += stringFromCharCode(codePoint);
    return output;
};

var decode = function decode(html, options) {
    options = merge(options, decode.options);
    var strict = options.strict;
    if (strict && regexInvalidEntity.test(html)) {
        parseError('malformed character reference');
    }
    return html.replace(regexDecode, function ($0, $1, $2, $3, $4, $5, $6, $7, $8) {
        var codePoint = void 0;
        var semicolon = void 0;
        var decDigits = void 0;
        var hexDigits = void 0;

        if ($4) {
            // Decode decimal escapes, e.g. `&#119558;`.
            decDigits = $4;
            semicolon = $5;
            if (strict && !semicolon) {
                parseError('character reference was not terminated by a semicolon');
            }
            codePoint = parseInt(decDigits, 10);
            return codePointToSymbol(codePoint, strict);
        }

        if ($6) {
            // Decode hexadecimal escapes, e.g. `&#x1D306;`.
            hexDigits = $6;
            semicolon = $7;
            if (strict && !semicolon) {
                parseError('character reference was not terminated by a semicolon');
            }
            codePoint = parseInt(hexDigits, 16);
            return codePointToSymbol(codePoint, strict);
        }

        // If we’re still here, `if ($7)` is implied; it’s an ambiguous
        // ampersand for sure. https://mths.be/notes/ambiguous-ampersands
        if (strict) {
            parseError('named character reference was not terminated by a semicolon');
        }
        return $0;
    });
};
decode.options = {
    'isAttributeValue': false,
    'strict': false
};
exports.default = decode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsicmVnZXhJbnZhbGlkRW50aXR5IiwicmVnZXhEZWNvZGUiLCJkZWNvZGVNYXBOdW1lcmljIiwiaW52YWxpZFJlZmVyZW5jZUNvZGVQb2ludHMiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJvYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImhhcyIsInByb3BlcnR5TmFtZSIsImNhbGwiLCJjb250YWlucyIsImFycmF5IiwidmFsdWUiLCJpbmRleCIsImxlbmd0aCIsIm1lcmdlIiwib3B0aW9ucyIsImRlZmF1bHRzIiwicmVzdWx0Iiwia2V5IiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiLCJFcnJvciIsImNvZGVQb2ludFRvU3ltYm9sIiwiY29kZVBvaW50Iiwic3RyaWN0Iiwib3V0cHV0IiwiZGVjb2RlIiwiaHRtbCIsInRlc3QiLCJyZXBsYWNlIiwiJDAiLCIkMSIsIiQyIiwiJDMiLCIkNCIsIiQ1IiwiJDYiLCIkNyIsIiQ4Iiwic2VtaWNvbG9uIiwiZGVjRGlnaXRzIiwiaGV4RGlnaXRzIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEscUJBQXFCLGlDQUEzQjtBQUNBLElBQU1DLGNBQWMsb0dBQXBCO0FBQ0EsSUFBTUMsbUJBQW1CLEVBQUUsS0FBSyxRQUFQLEVBQWlCLE9BQU8sUUFBeEIsRUFBa0MsT0FBTyxRQUF6QyxFQUFtRCxPQUFPLFFBQTFELEVBQW9FLE9BQU8sUUFBM0UsRUFBcUYsT0FBTyxRQUE1RixFQUFzRyxPQUFPLFFBQTdHLEVBQXVILE9BQU8sUUFBOUgsRUFBd0ksT0FBTyxRQUEvSSxFQUF5SixPQUFPLFFBQWhLLEVBQTBLLE9BQU8sUUFBakwsRUFBMkwsT0FBTyxRQUFsTSxFQUE0TSxPQUFPLFFBQW5OLEVBQTZOLE9BQU8sUUFBcE8sRUFBOE8sT0FBTyxRQUFyUCxFQUErUCxPQUFPLFFBQXRRLEVBQWdSLE9BQU8sUUFBdlIsRUFBaVMsT0FB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QUFsQyxFQUFzQ0MsRUFBdEMsRUFBMENDLEVBQTFDLEVBQThDO0FBQzNFLFlBQUlmLGtCQUFKO0FBQ0EsWUFBSWdCLGtCQUFKO0FBQ0EsWUFBSUMsa0JBQUo7QUFDQSxZQUFJQyxrQkFBSjs7QUFFQSxZQUFJUCxFQUFKLEVBQVE7QUFDSjtBQUNBTSx3QkFBWU4sRUFBWjtBQUNBSyx3QkFBWUosRUFBWjtBQUNBLGdCQUFJWCxVQUFVLENBQUNlLFNBQWYsRUFBMEI7QUFDdEJwQiwyQkFBVyx1REFBWDtBQUNIO0FBQ0RJLHdCQUFZbUIsU0FBU0YsU0FBVCxFQUFvQixFQUFwQixDQUFaO0FBQ0EsbUJBQU9sQixrQkFBa0JDLFNBQWxCLEVBQTZCQyxNQUE3QixDQUFQO0FBQ0g7O0FBRUQsWUFBSVksRUFBSixFQUFRO0FBQ0o7QUFDQUssd0JBQVlMLEVBQVo7QUFDQUcsd0JBQVlGLEVBQVo7QUFDQSxnQkFBSWIsVUFBVSxDQUFDZSxTQUFmLEVBQTBCO0FBQ3RCcEIsMkJBQVcsdURBQVg7QUFDSDtBQUNESSx3QkFBWW1CLFNBQVNELFNBQVQsRUFBb0IsRUFBcEIsQ0FBWjtBQUNBLG1CQUFPbkIsa0JBQWtCQyxTQUFsQixFQUE2QkMsTUFBN0IsQ0FBUDtBQUNIOztBQUVEO0FBQ0E7QUFDQSxZQUFJQSxNQUFKLEVBQVk7QUFDUkwsdUJBQ0ksNkRBREo7QUFHSDtBQUNELGVBQU9XLEVBQVA7QUFDSCxLQXBDTSxDQUFQO0FBcUNILENBM0NEO0FBNENBSixPQUFPWCxPQUFQLEdBQWlCO0FBQ2Isd0JBQW9CLEtBRFA7QUFFYixjQUFVO0FBRkcsQ0FBakI7a0JBSWVXLE0iLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlZ2V4SW52YWxpZEVudGl0eSA9IC8mIyg/Olt4WF1bXmEtZkEtRjAtOV18W14wLTl4WF0pLztcclxuY29uc3QgcmVnZXhEZWNvZGUgPSAvJihHdHxHVHxpaSk7fCYoZ3R8bHQpKD8hOykoWz1hLXpBLVowLTldPyl8JiMoWzAtOV0rKSg7Pyl8JiNbeFhdKFthLWZBLUYwLTldKykoOz8pfCYoWzAtOWEtekEtWl0rKS9nO1xyXG5jb25zdCBkZWNvZGVNYXBOdW1lcmljID0geyAnMCc6ICdcXHVGRkZEJywgJzEyOCc6ICdcXHUyMEFDJywgJzEzMCc6ICdcXHUyMDFBJywgJzEzMSc6ICdcXHUwMTkyJywgJzEzMic6ICdcXHUyMDFFJywgJzEzMyc6ICdcXHUyMDI2JywgJzEzNCc6ICdcXHUyMDIwJywgJzEzNSc6ICdcXHUyMDIxJywgJzEzNic6ICdcXHUwMkM2JywgJzEzNyc6ICdcXHUyMDMwJywgJzEzOCc6ICdcXHUwMTYwJywgJzEzOSc6ICdcXHUyMDM5JywgJzE0MCc6ICdcXHUwMTUyJywgJzE0Mic6ICdcXHUwMTdEJywgJzE0NSc6ICdcXHUyMDE4JywgJzE0Nic6ICdcXHUyMDE5JywgJzE0Nyc6ICdcXHUyMDFDJywgJzE0OCc6ICdcXHUyMDFEJywgJzE0OSc6ICdcXHUyMDIyJywgJzE1MCc6ICdcXHUyMDEzJywgJzE1MSc6ICdcXHUyMDE0JywgJzE1Mic6ICdcXHUwMkRDJywgJzE1Myc6ICdcXHUyMTIyJywgJzE1NCc6ICdcXHUwMTYxJywgJzE1NSc6ICdcXHUyMDNBJywgJzE1Nic6ICdcXHUwMTUzJywgJzE1OCc6ICdcXHUwMTdFJywgJzE1OSc6ICdcXHUwMTc4JyB9O1xyXG5jb25zdCBpbnZhbGlkUmVmZXJlbmNlQ29kZVBvaW50cyA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCAxMSwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDEyNywgMTI4LCAxMjksIDEzMCwgMTMxLCAxMzIsIDEzMywgMTM0LCAxMzUsIDEzNiwgMTM3LCAxMzgsIDEzOSwgMTQwLCAxNDEsIDE0MiwgMTQzLCAxNDQsIDE0NSwgMTQ2LCAxNDcsIDE0OCwgMTQ5LCAxNTAsIDE1MSwgMTUyLCAxNTMsIDE1NCwgMTU1LCAxNTYsIDE1NywgMTU4LCAxNTksIDY0OTc2LCA2NDk3NywgNjQ5NzgsIDY0OTc5LCA2NDk4MCwgNjQ5ODEsIDY0OTgyLCA2NDk4MywgNjQ5ODQsIDY0OTg1LCA2NDk4NiwgNjQ5ODcsIDY0OTg4LCA2NDk4OSwgNjQ5OTAsIDY0OTkxLCA2NDk5MiwgNjQ5OTMsIDY0OTk0LCA2NDk5NSwgNjQ5OTYsIDY0OTk3LCA2NDk5OCwgNjQ5OTksIDY1MDAwLCA2NTAwMSwgNjUwMDIsIDY1MDAzLCA2NTAwNCwgNjUwMDUsIDY1MDA2LCA2NTAwNywgNjU1MzQsIDY1NTM1LCAxMzEwNzAsIDEzMTA3MSwgMTk2NjA2LCAxOTY2MDcsIDI2MjE0MiwgMjYyMTQzLCAzMjc2NzgsIDMyNzY3OSwgMzkzMjE0LCAzOTMyMTUsIDQ1ODc1MCwgNDU4NzUxLCA1MjQyODYsIDUyNDI4NywgNTg5ODIyLCA1ODk4MjMsIDY1NTM1OCwgNjU1MzU5LCA3MjA4OTQsIDcyMDg5NSwgNzg2NDMwLCA3ODY0MzEsIDg1MTk2NiwgODUxOTY3LCA5MTc1MDIsIDkxNzUwMywgOTgzMDM4LCA5ODMwMzksIDEwNDg1NzQsIDEwNDg1NzUsIDExMTQxMTAsIDExMTQxMTFdO1xyXG5cclxuY29uc3Qgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcclxuXHJcbmNvbnN0IG9iamVjdCA9IHt9O1xyXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcclxuY29uc3QgaGFzID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHlOYW1lKSB7XHJcbiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5TmFtZSk7XHJcbn07XHJcblxyXG5jb25zdCBjb250YWlucyA9IGZ1bmN0aW9uIChhcnJheSwgdmFsdWUpIHtcclxuICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcclxuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmNvbnN0IG1lcmdlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGRlZmF1bHRzKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgIGxldCBrZXk7XHJcbiAgICBmb3IgKGtleSBpbiBkZWZhdWx0cykge1xyXG4gICAgICAgIC8vIEEgYGhhc093blByb3BlcnR5YCBjaGVjayBpcyBub3QgbmVlZGVkIGhlcmUsIHNpbmNlIG9ubHkgcmVjb2duaXplZFxyXG4gICAgICAgIC8vIG9wdGlvbiBuYW1lcyBhcmUgdXNlZCBhbnl3YXkuIEFueSBvdGhlcnMgYXJlIGlnbm9yZWQuXHJcbiAgICAgICAgcmVzdWx0W2tleV0gPSBoYXMob3B0aW9ucywga2V5KSA/IG9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuY29uc3QgcGFyc2VFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICB0aHJvdyBFcnJvcignUGFyc2UgZXJyb3I6ICcgKyBtZXNzYWdlKTtcclxufTtcclxuY29uc3QgY29kZVBvaW50VG9TeW1ib2wgPSBmdW5jdGlvbiAoY29kZVBvaW50LCBzdHJpY3QpIHtcclxuICAgIGxldCBvdXRwdXQgPSAnJztcclxuICAgIGlmICgoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB8fCBjb2RlUG9pbnQgPiAweDEwRkZGRikge1xyXG4gICAgICAgIGlmIChzdHJpY3QpIHtcclxuICAgICAgICAgICAgcGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSBVbmljb2RlIHJhbmdlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnXFx1RkZGRCc7XHJcbiAgICB9XHJcbiAgICBpZiAoaGFzKGRlY29kZU1hcE51bWVyaWMsIGNvZGVQb2ludCkpIHtcclxuICAgICAgICBpZiAoc3RyaWN0KSB7XHJcbiAgICAgICAgICAgIHBhcnNlRXJyb3IoJ2Rpc2FsbG93ZWQgY2hhcmFjdGVyIHJlZmVyZW5jZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVjb2RlTWFwTnVtZXJpY1tjb2RlUG9pbnRdO1xyXG4gICAgfVxyXG4gICAgaWYgKHN0cmljdCAmJiBjb250YWlucyhpbnZhbGlkUmVmZXJlbmNlQ29kZVBvaW50cywgY29kZVBvaW50KSkge1xyXG4gICAgICAgIHBhcnNlRXJyb3IoJ2Rpc2FsbG93ZWQgY2hhcmFjdGVyIHJlZmVyZW5jZScpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xyXG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xyXG4gICAgICAgIG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcclxuICAgICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRjtcclxuICAgIH1cclxuICAgIG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn07XHJcblxyXG5jb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAoaHRtbCwgb3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IG1lcmdlKG9wdGlvbnMsIGRlY29kZS5vcHRpb25zKTtcclxuICAgIGNvbnN0IHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xyXG4gICAgaWYgKHN0cmljdCAmJiByZWdleEludmFsaWRFbnRpdHkudGVzdChodG1sKSkge1xyXG4gICAgICAgIHBhcnNlRXJyb3IoJ21hbGZvcm1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaHRtbC5yZXBsYWNlKHJlZ2V4RGVjb2RlLCBmdW5jdGlvbiAoJDAsICQxLCAkMiwgJDMsICQ0LCAkNSwgJDYsICQ3LCAkOCkge1xyXG4gICAgICAgIGxldCBjb2RlUG9pbnQ7XHJcbiAgICAgICAgbGV0IHNlbWljb2xvbjtcclxuICAgICAgICBsZXQgZGVjRGlnaXRzO1xyXG4gICAgICAgIGxldCBoZXhEaWdpdHM7XHJcblxyXG4gICAgICAgIGlmICgkNCkge1xyXG4gICAgICAgICAgICAvLyBEZWNvZGUgZGVjaW1hbCBlc2NhcGVzLCBlLmcuIGAmIzExOTU1ODtgLlxyXG4gICAgICAgICAgICBkZWNEaWdpdHMgPSAkNDtcclxuICAgICAgICAgICAgc2VtaWNvbG9uID0gJDU7XHJcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgIXNlbWljb2xvbikge1xyXG4gICAgICAgICAgICAgICAgcGFyc2VFcnJvcignY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBwYXJzZUludChkZWNEaWdpdHMsIDEwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvZGVQb2ludFRvU3ltYm9sKGNvZGVQb2ludCwgc3RyaWN0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkNikge1xyXG4gICAgICAgICAgICAvLyBEZWNvZGUgaGV4YWRlY2ltYWwgZXNjYXBlcywgZS5nLiBgJiN4MUQzMDY7YC5cclxuICAgICAgICAgICAgaGV4RGlnaXRzID0gJDY7XHJcbiAgICAgICAgICAgIHNlbWljb2xvbiA9ICQ3O1xyXG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICFzZW1pY29sb24pIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlRXJyb3IoJ2NoYXJhY3RlciByZWZlcmVuY2Ugd2FzIG5vdCB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29kZVBvaW50ID0gcGFyc2VJbnQoaGV4RGlnaXRzLCAxNik7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2RlUG9pbnRUb1N5bWJvbChjb2RlUG9pbnQsIHN0cmljdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB3ZeKAmXJlIHN0aWxsIGhlcmUsIGBpZiAoJDcpYCBpcyBpbXBsaWVkOyBpdOKAmXMgYW4gYW1iaWd1b3VzXHJcbiAgICAgICAgLy8gYW1wZXJzYW5kIGZvciBzdXJlLiBodHRwczovL210aHMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHNcclxuICAgICAgICBpZiAoc3RyaWN0KSB7XHJcbiAgICAgICAgICAgIHBhcnNlRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAnbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXMgbm90IHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAkMDtcclxuICAgIH0pO1xyXG59O1xyXG5kZWNvZGUub3B0aW9ucyA9IHtcclxuICAgICdpc0F0dHJpYnV0ZVZhbHVlJzogZmFsc2UsXHJcbiAgICAnc3RyaWN0JzogZmFsc2VcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgZGVjb2RlOyJdfQ==