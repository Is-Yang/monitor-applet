<template>
    <view class="login-container">
        <view class="top-banner" style="padding-top: {{ statusBarHeight}}px">
            <image src="../assets/images/logo.png" class="logo" />
            <view class="title">欢迎登录龙芯北斗地灾监控系统</view>
            <text>未注册的手机号码验证后自动创建账号</text>
        </view>
        <view class="phone-wrap">
            <view class="title">手机号登录</view>
            <van-cell-group>
                <van-field label="+86" title-width="60px" value="{{ phone }}" type="number" placeholder="请输入手机号" clearable maxlength="11" @input="onPhoneInput" class="" />
                <van-field label="验证码" title-width="60px" value="{{ code }}" placeholder="请输入手机验证码" @input="onCodeInput" clearable use-button-slot>
                    <button wx:if="{{ timer == 0 }}" slot="button" class="get-code" @tap="getSendCode">获取验证码</button>
                    <text wx:else slot="button" class="txtColor">{{timer}}s后重试</text>
                </van-field>
            </van-cell-group>
            <button wx:if="{{phone == '' || code == ''}}" round block class="login-btn">同意协议并登录</button>
            <button wx:if="{{phone != '' && code != ''}}" round block class="login-btn has" @tap="tapLogin">同意协议并登录</button>
        </view>
        <view class="other-login">
            <view class="sum">
                <text>其他登录方式</text>
            </view>
            <button open-type='getUserInfo' bindgetuserinfo="getUserInfo" class="reset-button">
                <image src="../assets/images/wechat.png" />
            </button>
        </view>
        <view class="agree">
            登录/注册代表已阅读并同意<text>用户协议</text>和<text>隐私政策</text>
        </view>

        <van-popup show="{{ showGetPhone }}" closeable bind:close="onClosePhonePopup" custom-class="custom-popup">
            <image src="../assets/images/logo.png" />
            <view>龙芯北斗地灾监控系统 申请使用您的手机号码</view>
            <button class="allow" open-type='getPhoneNumber' bindgetphonenumber="getPhoneNumber">去授权</button>
        </van-popup>

        <van-popup show="{{ showMessage }}" closeable bind:close="onCloseMessagePopup" custom-class="custom-popup">
            <image src="../assets/images/logo.png" />
            <view>龙芯北斗地灾监控系统 需要得到您的授权才能推送预警提示信息，是否马上去授权？</view>
            <button class="allow" bindtap="onAuthMesg">去授权</button>
        </van-popup>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {
        setStore,
        getStore
    } from 'wepy-redux'
    import configStore from '../store'
    import tip from "../utils/tip"
    import * as api from '../api/api'

    const store = configStore()
    setStore(store)

    export default class Login extends wepy.page {
        config = {
            navigationBarTitleText: '登录',
            usingComponents: {
                "van-cell": "../components/vant/cell/index",
                "van-field": "../components/vant/field/index",
                "van-icon": "../components/vant/icon/index",
                "van-popup": "../components/vant/popup/index"
            }
        }
        data = {
            phone: '',
            code: '',  // 验证码
            uuid: '',
            timer: 0,
            getPhone: '',
            sendInterval: null,
            showGetPhone: false,
            showMessage: false,
            flag: {
                to: 'index', // 标识跳转到哪个页面
                isMsg: false,  // 是否有消息弹出
            },
            userInfo: {},  // 用户信息
            statusBarHeight: wx.getSystemInfoSync().statusBarHeight
        }

        onLoad(options) {
            if (options.q) {
                let url = decodeURIComponent(options.q);
                let qrCode = url.split('?qrcode=')[1];

                if(qrCode) {
                    this.userInfo.qrCode = qrCode;
                }
            }
        }

        methods = {
            // 手机号发送验证码登录
            tapLogin() {
                // 微信授权登录
                if (this.userInfo.openId) {
                    this.wechatByPhone();
                } else {   // 短信验证码登录
                    if (this.verifyPhone()) {
                        this.smsLogin();
                    }
                }
            },
            // 微信授权登录-获取用户信息
            getUserInfo(event) {
                if (event.detail.errMsg == 'getUserInfo:ok') {
                    wx.checkSession({
                        success: () => {
                            console.log('===未失效====')
                            this.userInfo = wx.getStorageSync('userInfo');
                            console.log(this.userInfo);
                            if(this.userInfo) {
                                this.judgeBindWechat();
                            } else {
                                console.log('====userInfo缓存过期，重新登录获取=====')
                                this.handleWxLogin(event);
                            }
                        },
                        fail: () => {
                            console.log('====已失效，重新登录获取=====')
                            this.handleWxLogin(event);
                            
                        }
                    })
                }
            },
            // 获取手机号
            getPhoneNumber(event) {
                if(event.detail.errMsg == 'getPhoneNumber:ok') {
                    this.userInfo.encryptedData = event.detail.encryptedData;
                    this.userInfo.iv = event.detail.iv;
                    this.decryptPhone();
                }
            },
            // 发送验证码
            getSendCode() {
                if (this.verifyPhone()) {
                    const that = this;
                    wx.showModal({
                        title: '确认手机号码',
                        content: `我们将发送验证码短信到这个号码： +86 ${this.phone}`,
                        success(res) {
                            if (res.confirm) {
                                that.getCode({phone: that.phone});
                                wx.showToast({
                                    title: '发送成功',
                                    icon: 'success',
                                    duration: 2000
                                })
                                that.timeChange();
                            }
                        }
                    })
                }
            },
            onAuthMesg() {
                let tmplId = wepy.$instance.globalData.tmplId;
                wx.requestSubscribeMessage({
                    tmplIds: [tmplId],
                    success: (res => {
                        console.log('suc:', res)
                        if (res[tmplId] == 'accept') {
                            this.showMessage = false;
                            this.toPage();
                        } else if (res[tmplId] == 'reject') { // 用户拒绝授权
                            this.showTips();
                        }
                        this.showMessage = false;
                        this.toPage();
                    }),
                    fail: (err => {
                        if (err.errCode == '20004') {
                            this.showTips();
                        } else if (err.errCode == '20001') {
                            wx.showToast({
                                title: '订阅号模板id信息错误，请监测配置',
                                icon: 'none',
                                duration: 1500
                            })
                        }
                        console.log('err:', err)
                    })
                });
            },
            // 取消授权手机号
            onClosePhonePopup() {
                this.showGetPhone = false;
            },
            onCloseMessagePopup() {
                this.showMessage = false;
            },
            onPhoneInput(e) {
                this.phone = e.detail;
            },
            onCodeInput(e) {
                this.code = e.detail;
            }
        }
        handleWxLogin(event) {
            // 获取用户登录code
            wx.login({
                success: ((res) => {
                    if(res.code) {
                        const { userInfo, iv, encryptedData } = event.detail;
                        this.userInfo = userInfo;
                        this.userInfo.iv = iv;
                        this.userInfo.encryptedData = encryptedData;
                        this.userInfo.code = res.code;
                        this.getOpenid({code: res.code})
                    }
                })
            })
        }
        showTips() {
            wx.showModal({
                title: '温馨提示',
                content: "您的消息订阅主开关已关闭，如需要消息推送服务，请点击确定跳转设置页面打开授权后再次尝试。",
                success: (modal) => {
                    if (modal.confirm) { // 点击确定
                        wx.openSetting({ 
                            withSubscriptions: true,
                            success: (res) => {
                                if(res.errMsg == 'openSetting:ok') {
                                    this.showMessage = false;
                                    this.toPage();
                                }
                            }
                        })
                    }
                }
            })
        }
        // 获取是否绑定微信
        async judgeBindWechat() {
            console.log(this.userInfo.unionId)
            let res = await api.bindWeChatState({unionId: this.userInfo.unionId});
            console.log(res)
            if(res.code == 200) {
                this.userInfo.isBindWechat = res.data;
                console.log('绑定状态：', res.data)
                // 已授权绑定
                if(res.data) {
                    this.wechatLogin();  
                } else {
                    // 弹出获取手机号
                    this.showGetPhone = true;
                }
                this.$apply();
            }
        }
        // 获取unionId
        async decryptUnionId() {
            const { iv, encryptedData, sessionKey } = this.userInfo;
            let params = {
                iv,
                sessionKey,
                encryptedData
            }
            let res = await api.decryptUnionId(params);
            if (res.code == 200) {
                this.userInfo.unionId = res.unionId;
                wx.setStorageSync('userInfo', this.userInfo);
                store.dispatch({
                    type: 'UPDATE_USER_INFO',
                    userInfo: this.userInfo
                })
                this.judgeBindWechat();
            } else if (res.code == 500 && res.msg == '加密字符串解密失败') {
                // 当用户缓存过期，但sessionKey未过期时，需要重新去wx.login，这时候就会报错，需要用户重新点击去获取才行
                wx.showToast({
                    title: '信息获取失败，请重新获取',
                    icon: 'none',
                    duration: 1500
                })
            } else {
                wx.showToast({
                    title: result.msg || '服务器异常',
                    icon: 'none',
                    duration: 1500
                })
            }
        }

        // 微信授权登录 - 录入手机号
        async wechatByPhone() {
            const { avatarUrl, openId, nickName, phone, gender, unionId } = this.userInfo;
            let params = {
                avatar: avatarUrl,
                code: this.code,  // 手机验证码登录
                uuid: this.uuid, // 唯一标识
                openId: openId,
                nickName: nickName,
                sex: gender,
                unionId: unionId,
                phoneNumber: this.phone
            }
            let res = await api.wechatByPhone(params);
            if (res.code == 200) {
                this.loginSuccess(res);
            }
        }
        // 获取解密手机号
        async decryptPhone() {
            const { code, iv, encryptedData, sessionKey } = this.userInfo;
            let params = {
                code,
                iv,
                sessionKey,
                phoneNumber: encryptedData
            }
            let res = await api.decryptPhone(params)
            if (res.code == 200 && res.phoneNumber) {
                wx.navigateTo({
                    url: `/pages/bindPhone?tel=${res.phoneNumber}`
                });
                this.showGetPhone = false;
                this.$apply();
            } 
        }
        // 通过code获取openid
        async getOpenid(params) {
            let res = await api.getOpenid(params);
            if (res.code == 200) {
                this.userInfo.openId = res.open_id;
                this.userInfo.sessionKey = res.session_key;
                this.decryptUnionId();
                this.$apply();
            }
        }

        // 手机验证码登录
        async smsLogin() {
            let params = {
                phoneNumber: this.phone,
                code: this.code,
                uuid: this.uuid,
                qrCode: this.userInfo.qrCode
            }
            let res = await api.smsLogin(params);
            if(res.code == 200) {
                this.loginSuccess(res);
            }
            this.$apply();
        }
        async getCode(params) {
            let res = await api.getCode(params);
            if (res.code == 200) {
                this.code = res.verifyCode;
                this.uuid = res.uuid;
                this.$apply();
            }
        }
        // 微信用户code登录
        async wechatLogin() {
            const { unionId, qrCode } = this.userInfo;
            let params = {
                unionId,
                qrCode
            }
            let res = await api.wechatLogin(params);
            if(res.code == 200) {
                this.loginSuccess(res);
            }
            
        }
        // 登录成功
        loginSuccess(data) {
            wx.setStorageSync('token', data.token);
            wx.setStorageSync('isBindDept', data.isBindDept);
            this.flag = {
                to: data.page,
                isMsg: data.waring_msg || false
            }
            if(data.isBindDept) {
                // 判断用户是否开启订阅消息
                wx.getSetting({
                    withSubscriptions: true,
                    success: ((res) => {
                        const { subscriptionsSetting } = res;
                        console.log('setting', res)
                        let tempId = wepy.$instance.globalData.tmplId;
                        if (subscriptionsSetting && subscriptionsSetting.itemSettings && subscriptionsSetting.itemSettings[tempId] == 'accept') {
                            this.toPage();
                        } else {
                            this.showMessage = true;
                            this.$apply();
                        }
                    })
                })
            } else {
                this.toPage();
            }
            
        }
        // 跳转页面
        toPage() {
            // 本单位用户，跳转至我的单位页面
            if(this.flag.to == 'dept') {
                wx.navigateTo({
                    url: 'pages/userUnit'
                })
            } else {
                if (this.flag.isMsg) {
                    tip.showToast('您无权限查看该单位信息');
                }
                wx.redirectTo({
                    url: '/pages/index'
                })
            }
        }
        // 验证手机号是否正确
        verifyPhone() {
            if (this.phone == '') {
                tip.showToast('请输入手机号获取验证码');
                return false;
            }
            if (typeof this.phone !== 'number' && isNaN(this.phone)) {
                tip.showToast('您输入的手机号格式有误');
                return false;
            }
            if (this.phone) {
                if (!(/^1[3456789]\d{9}$/.test(this.phone))) {
                    tip.showToast("手机号码有误，请重填");
                    return false;
                }
            }
            return true;
        }
        // 时间改变
        timeChange() {
            const count = 60;
            this.timer = count;
            if (!this.sendInterval) {
                this.sendInterval = setInterval(() => {
                    if (this.timer > 0) {
                        this.timer--;
                        this.$apply();
                    } else {
                        this.sendInterval && clearInterval(this.sendInterval);
                        this.sendInterval = null;
                    }
                }, 1000);
            }
        }
    }
</script>

<style lang="less">
    .login-container {
        .top-banner {
            width: 100%;
            height: 330rpx;
            background-image: linear-gradient(0deg, #38c099 0%, #cfe49d 100%), linear-gradient( #ffffff, #ffffff);
            color: #fff;
            line-height: 38rpx;
            font-size: 21rpx;
            text-align: center;
            .logo {
                width: 108rpx;
                height: 108rpx;
                margin-top: 30rpx;
            }
            .title {
                margin: 30rpx 0;
                font-size: 42rpx;
            }
        }
        .phone-wrap {
            padding: 43rpx 30rpx;
            .title {
                margin-bottom: 50rpx;
                font-size: 42rpx;
                line-height: 38rpx;
            }
            .num {
                color: #999;
            }
        }
        .txtColor {
            font-size: 21rpx;
        }
        .van-field__button {
            height: 54rpx;
            line-height: 40rpx;
        }
        .get-code {
            width: 164rpx;
            height: 54rpx;
            line-height: 54rpx;
            background-color: #e1e1e1;
            border-radius: 2px;
            color: #41c297;
            font-size: 21rpx;
            border: none;
        }
        .login-btn {
            width: 586rpx;
            height: 76rpx;
            line-height: 76rpx;
            margin-top: 83rpx;
            color: #ffffff;
            pointer-events: none;
            background-color: #e6e6e6;
            font-size: 28rpx;
            font-weight: bold;
            border-radius: 25px;
        }
        .login-btn.has {
            background-image: linear-gradient(0deg, #38c099 0%, #59c89a 50%, #cfe49d 100%), linear-gradient( #e6e6e6, #e6e6e6);
            pointer-events: all;
        }
        .other-login {
            margin-top: 50rpx;
            text-align: center;
            .sum {
                position: relative;
                height: 50rpx;
                line-height: 50rpx;
                margin: 0 auto;
                &::after {
                    content: "";
                    position: absolute;
                    width: 100%;
                    height: 1px;
                    border-bottom: 1px solid #eee;
                    left: 0;
                    top: 25rpx;
                    transform: scale(.5);
                    z-index: -1;
                }
                text {
                    display: block;
                    width: 150rpx;
                    font-size: 21rpx;
                    margin: 0 auto;
                    font-weight: bold;
                    color: #cccccc;
                    background-color: #fff;
                }
            }
            .reset-button {
                background-color: transparent;
                margin: 30rpx 20rpx;
                display: inline-block;
                padding: 0;
                line-height: 1;
                border: none;
            }
            image {
                width: 83rpx;
                height: 67rpx;
            }
        }
        .agree {
            position: absolute;
            bottom: 30rpx;
            width: 100%;
            text-align: center;
            font-size: 21rpx;
            color: #333;
            text {
                color: #0066ff;
            }
        }
    }
</style>

